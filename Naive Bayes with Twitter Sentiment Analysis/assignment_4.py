# -*- coding: utf-8 -*-
"""twitter_sentiment_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bZkxGT3BtrvlgAYG-j5S3wPley7cH9pu
"""

import sys
import pandas as pd
from IPython.display import display 

print("Location for dataset:", sys.argv[1])
tweets_location = sys.argv[1]

tweets_df = pd.read_csv(tweets_location, sep=',') # uses the tweets_location variable from system arguments to load in DATA

tweets = tweets_df[["airline_sentiment", "airline", "text"]] # picks up the specific columns as directed.

display(tweets)

tweets["text"] = tweets["text"].str.lower() # making all text data lowercase

from sklearn.feature_extraction.text import CountVectorizer
count_vect = CountVectorizer()  
counts = count_vect.fit_transform(tweets['text']) # running the count vectorizer as directed and shown in class

from sklearn.feature_extraction.text import TfidfTransformer
transformer = TfidfTransformer().fit(counts) 
counts = transformer.transform(counts) # running the transformer as directed and shown in class

from sklearn.preprocessing import LabelEncoder 
label_encoder = LabelEncoder() # creating label_encoder
tweets['airline_sentiment'] = label_encoder.fit_transform(tweets['airline_sentiment']) # changes the values of airline_sentiment from categorical to numerical 

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(counts, tweets['airline_sentiment'], test_size=0.1) # splits from TRAIN and TEST

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB(alpha = 0.5, fit_prior = False).fit(X_train, y_train)  # parameters including alpha and fit_prior, running naive bayes on dataset

import numpy as np
predicted = model.predict(X_test) # running predictions with test data
print("Accuracy: ", np.mean(predicted == y_test)) # printing out accuracy

print("Average Airline Sentiments:")
display(tweets[['airline_sentiment', 'airline']].groupby('airline', as_index=False)['airline_sentiment'].mean()) # group by results in average results closer to 0 = negative, closer to 2 = positive 

positive_sentiments = tweets.loc[tweets['airline_sentiment'] == 2] # stores all positive sentiments in one dataset
highest_positive_sentiment = positive_sentiments.groupby('airline', as_index=False).count().max() # finding the max from the dataset after grouping by airlines
print("Airline with the Highest Positive Sentiment: ", highest_positive_sentiment["airline"]) # prints out highest value